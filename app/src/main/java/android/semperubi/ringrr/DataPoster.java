package android.semperubi.ringrr;
/**
 * Created by Herb on 12/21/2015.
 */

import android.os.AsyncTask;
import android.util.Pair;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Herb on 12/21/2015.
 */
//curl -X POST --data @/path/to/some/payload/file "http://test.hop.video:7770/device-status/upload-log?log=gps&device=somedevice&now=1450638175920&start=1450638075920&stop=1450638175920&dry-run=trueâ€

//Current url: http://test.hop.video:7770/device-status/upload-log
//(The expected production url is â€œhttps://hop.video/device-status/upload-logâ€)

//Query params:

// “log” - Name/type of log. Could by something like “gps”, “battery”, or “all”

//“device” - Name of device. Attached is some device ID code that I’ve been using.
// If you use an ID generated by “org.se.util.DeviceId.findBest( <your context> ).toString()”,
// then we should be able to match the log to the correct device on our end.

//“now” - This is the clock time on the device in unix time millis (ie, System.currentTimeMillis()). We don’t expect device clocks will be synced, but we need device to include it’s current clock time so we know the offset from real time.
// “start” - The timestamp for the start of the log (unix time millis)
//“stop” [optional] - The timestamp for the end of the log (unix time millis).
//“dry-run” [optional] - If set to “true”, the server will not store any data that is sent.
//Log data in whatever format works. Should be compressed.

public class DataPoster extends AsyncTask<String, String, String> implements OnTaskCompleted {

    private final String currentUrl="http://test.hop.video:7770/device-status/upload-log";
    private final String productionURL="https://hop.video/device-status/upload-log";
    private final String postTemplate="--data @%filepath \"%currentURL";
    private final int sleepTime = 10000;
    private String thisDevice;
    private String dataFilepath;
    private Long logTime,startTime,stopTime;
    private boolean dryRunFlag = true;

    URL url;
    HttpURLConnection httpConnection;
    int bf;

    public DataPoster(String devID,long lTime,long sTime,long eTime,boolean dFlag) {

        thisDevice = devID;
        logTime = lTime;
        startTime = sTime;
        stopTime = eTime;
        dryRunFlag = dFlag;

        try {
            url = new URL(currentUrl);
            httpConnection = (HttpURLConnection) url.openConnection();
        }
        catch(Exception e) {
            bf = 1;
        }
    }

    @Override
    protected String doInBackground(String... params) {
        String dataFilePath = params[0];
        // taskStart = new Date();
        try {
            postCode();
            //lastSendTime = new Date();
            //sendflag = false;
            Thread.sleep(sleepTime);
        }
        catch (InterruptedException e)
        {
            Utilities.handleCatch("HttpSendTime", "constructor", e);
        }
        catch (Exception e) {
            Utilities.handleCatch("HttpSendTime", "constructor", e);
        }

        return "DONE";
    }

    private void postCode() {
        final String cookieTemplate="?log=gps&device=%deviceID&now=%logtime&start=%timeStart&stop=%timeStop&dry-run=%dryrunFlag";
        int responseCode;
        String inputLine;
        String statisticsData;
        StringBuffer response;
        String urlParameters;
        List<Pair<String, String>> queryParams = new ArrayList<Pair<String,String>>();

        DataOutputStream dataOutputStream = null;
        BufferedReader inputReader;

        statisticsData = getStatisticsData();
        //add request header
        try {
            httpConnection.setRequestMethod("POST");
        }
        catch (Exception e) {
            bf = 1;
        }
        httpConnection.setDoOutput(true);
        httpConnection.setDoInput(true);
        httpConnection.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
        httpConnection.setRequestProperty("Content-Type","text/plain");

        urlParameters = "?log=gps&device=" + thisDevice + "&now=" + logTime.toString() + "&start=" + startTime.toString() + "&stop=" + stopTime.toString() + "dry-run=true";
        bf = 1;
        // Send post request

        try {
            String fpath;
            String logLine;
            boolean readFlag= true;
            FileReader logFile;
            BufferedReader logFilereader;
            dataOutputStream = new DataOutputStream(httpConnection.getOutputStream());
            dataOutputStream.writeBytes(urlParameters);
            try {
                fpath = Utilities.getStatLogFilePath();
                logFile = new FileReader(fpath);
                logFilereader = new BufferedReader(logFile);
                while(readFlag) {
                    logLine = logFilereader.readLine();
                    if (logLine == null) {
                        readFlag = false;
                    }
                    else {
                        dataOutputStream.writeBytes(logLine);
                    }
                }

            }
            catch (Exception e) {
                Utilities.handleCatch("E","Ringrr:DataPoster:post",e);
            }

            dataOutputStream.flush();
            dataOutputStream.close();
        }
        catch (Exception e) {
            bf = 1;
        }

        try {
            responseCode = httpConnection.getResponseCode();
            //System.out.println("\nSending 'POST' request to URL : " + url);
            //System.out.println("Post parameters : " + urlParameters);
            //System.out.println("Response Code : " + responseCode);

            inputReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
            response = new StringBuffer();

            while ((inputLine = inputReader.readLine()) != null) {
                response.append(inputLine);
            }
            inputReader.close();

            //print result
            //System.out.println(response.toString());
        }
        catch (Exception e) {
            bf = 1;
        }
    }


    protected String getStatisticsData() {
        String allText="";
        String textLine;
        boolean readFlag = true;
        FileReader logFileReader;
        BufferedReader logFileBufferedReader;

        try {
            logFileReader = new FileReader(Utilities.getStatLogFilePath());
            logFileBufferedReader = new BufferedReader(logFileReader);
            while(readFlag) {
                textLine = logFileBufferedReader.readLine();
                if (textLine == null) {
                    readFlag = false;
                }
                else {
                    allText = allText + textLine + Utilities.newLine;
                }
            }
        } catch (Exception e) {
            Utilities.handleCatch("Ringrr","StatisticsLog",e);
        }

        return allText;
    }




    public void onTaskCompleted() {

        bf =1;
    }
}

